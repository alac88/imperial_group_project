open Core

let get_query vulnerability_type = match vulnerability_type with
  | "integer-overflow" -> "is_overflow"
  | _ -> failwithf "unknown vulnerability %s" vulnerability_type ()

let analyze_vulnerabilities vulnerability_type ~output =
  let open PgMonad.Let_syntax in
  let%bind pg_db = PgDb.create (Sys.getenv_exn "DATABASE_URL") in

  let%bind contracts = PgDb.get_vulnerable_contracts pg_db vulnerability_type in

  let tracer = Tracer.create Taggers.all in

  let analyze_transaction raw_trace =
    let trace = Yojson.Safe.from_string raw_trace in
    let struct_logs = Yojson.Safe.Util.member "structLogs" trace in
    let traces = TraceParser.parse_json struct_logs in
    let db = Tracer.execute_traces tracer traces in
    let trace_indexes = FactDb.query1 db vulnerability_type in
    List.map ~f:(Fn.flip Yojson.Safe.Util.index struct_logs) trace_indexes
  in

  let analyze_contract contract =
    let rec run_analysis offset acc =
      let%bind transactions = PgDb.get_contract_transactions pg_db ~offset contract in
      if List.is_empty transactions
        then PgMonad.return []
        else
          let results = List.map ~f:(Fn.compose snd analyze_transaction) transactions in
          run_analysis (offset + List.length transactions) acc
    in
    run_analysis 0 []
  in

  let%map results = PgMonad.all (List.map ~f:analyze_contract contracts) in
  
  print_endline (output ^ " " ^(List.hd_exn contracts))
